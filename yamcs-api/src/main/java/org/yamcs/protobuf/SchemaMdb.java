// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from mdb.proto

package org.yamcs.protobuf;


public final class SchemaMdb
{

    public static final class UnitInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.UnitInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.UnitInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.UnitInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.UnitInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.UnitInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.UnitInfo message) throws java.io.IOException
            {
                if(message.hasUnit())
                    output.writeString(1, message.getUnit(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.UnitInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.UnitInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.UnitInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.UnitInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.UnitInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.UnitInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.UnitInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.UnitInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.UnitInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.UnitInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.UnitInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setUnit(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.UnitInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.UnitInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.UnitInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.UnitInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.UnitInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.UnitInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.UnitInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.UnitInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.UnitInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.UnitInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "unit";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("unit", 1);
        }
    }

    public static final class AlarmRange
    {
        public static final org.yamcs.protobuf.SchemaMdb.AlarmRange.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.AlarmRange.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.AlarmRange.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.AlarmRange.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.AlarmRange>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.AlarmRange message) throws java.io.IOException
            {
                if(message.hasLevel())
                    output.writeString(1, message.getLevel().name(), false);
                if(message.hasMinInclusive())
                    output.writeDouble(2, message.getMinInclusive(), false);
                if(message.hasMaxInclusive())
                    output.writeDouble(3, message.getMaxInclusive(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.AlarmRange message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmRange.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmRange.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.AlarmRange> typeClass()
            {
                return org.yamcs.protobuf.Mdb.AlarmRange.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.AlarmRange.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.AlarmRange.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.AlarmRange message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.AlarmRange newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.AlarmRange.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.AlarmRange.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setLevel(org.yamcs.protobuf.Mdb.AlarmLevelType.valueOf(input.readString()));
                            break;
                        case 2:
                            builder.setMinInclusive(input.readDouble());
                            break;
                        case 3:
                            builder.setMaxInclusive(input.readDouble());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.AlarmRange.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.AlarmRange.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.AlarmRange.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmRange.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmRange.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.AlarmRange.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.AlarmRange.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.AlarmRange.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.AlarmRange.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.AlarmRange.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "level";
                case 2: return "minInclusive";
                case 3: return "maxInclusive";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("level", 1);
            fieldMap.put("minInclusive", 2);
            fieldMap.put("maxInclusive", 3);
        }
    }

    public static final class EnumerationAlarm
    {
        public static final org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.EnumerationAlarm>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.EnumerationAlarm message) throws java.io.IOException
            {
                if(message.hasLevel())
                    output.writeString(1, message.getLevel().name(), false);
                if(message.hasValue())
                    output.writeInt64(2, message.getValue(), false);
                if(message.hasLabel())
                    output.writeString(3, message.getLabel(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.EnumerationAlarm message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.EnumerationAlarm> typeClass()
            {
                return org.yamcs.protobuf.Mdb.EnumerationAlarm.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.EnumerationAlarm.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.EnumerationAlarm.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.EnumerationAlarm message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.EnumerationAlarm newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.EnumerationAlarm.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.EnumerationAlarm.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setLevel(org.yamcs.protobuf.Mdb.AlarmLevelType.valueOf(input.readString()));
                            break;
                        case 2:
                            builder.setValue(input.readInt64());
                            break;
                        case 3:
                            builder.setLabel(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.EnumerationAlarm.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.EnumerationAlarm.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.EnumerationAlarm.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.EnumerationAlarm.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.EnumerationAlarm.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.EnumerationAlarm.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.EnumerationAlarm.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.EnumerationAlarm.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "level";
                case 2: return "value";
                case 3: return "label";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("level", 1);
            fieldMap.put("value", 2);
            fieldMap.put("label", 3);
        }
    }

    public static final class AlarmInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.AlarmInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.AlarmInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.AlarmInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.AlarmInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.AlarmInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.AlarmInfo message) throws java.io.IOException
            {
                if(message.hasMinViolations())
                    output.writeInt32(1, message.getMinViolations(), false);
                for(org.yamcs.protobuf.Mdb.AlarmRange staticAlarmRange : message.getStaticAlarmRangeList())
                    output.writeObject(2, staticAlarmRange, org.yamcs.protobuf.SchemaMdb.AlarmRange.WRITE, true);

                for(org.yamcs.protobuf.Mdb.EnumerationAlarm enumerationAlarm : message.getEnumerationAlarmList())
                    output.writeObject(3, enumerationAlarm, org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.WRITE, true);

            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.AlarmInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.AlarmInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.AlarmInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.AlarmInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.AlarmInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.AlarmInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.AlarmInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.AlarmInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.AlarmInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setMinViolations(input.readInt32());
                            break;
                        case 2:
                            builder.addStaticAlarmRange(input.mergeObject(org.yamcs.protobuf.Mdb.AlarmRange.newBuilder(), org.yamcs.protobuf.SchemaMdb.AlarmRange.MERGE));

                            break;
                        case 3:
                            builder.addEnumerationAlarm(input.mergeObject(org.yamcs.protobuf.Mdb.EnumerationAlarm.newBuilder(), org.yamcs.protobuf.SchemaMdb.EnumerationAlarm.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.AlarmInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.AlarmInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.AlarmInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.AlarmInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.AlarmInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.AlarmInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.AlarmInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.AlarmInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.AlarmInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "minViolations";
                case 2: return "staticAlarmRange";
                case 3: return "enumerationAlarm";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("minViolations", 1);
            fieldMap.put("staticAlarmRange", 2);
            fieldMap.put("enumerationAlarm", 3);
        }
    }

    public static final class DataEncodingInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.DataEncodingInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.DataEncodingInfo message) throws java.io.IOException
            {
                if(message.hasType())
                    output.writeString(1, message.getType().name(), false);
                if(message.hasLittleEndian())
                    output.writeBool(2, message.getLittleEndian(), false);
                if(message.hasSizeInBits())
                    output.writeInt32(3, message.getSizeInBits(), false);
                if(message.hasEncoding())
                    output.writeString(4, message.getEncoding(), false);
                if(message.hasDefaultCalibrator())
                    output.writeString(5, message.getDefaultCalibrator(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.DataEncodingInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.DataEncodingInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.DataEncodingInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.DataEncodingInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.DataEncodingInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.DataEncodingInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.DataEncodingInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.DataEncodingInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.DataEncodingInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setType(org.yamcs.protobuf.Mdb.DataEncodingInfo.Type.valueOf(input.readString()));
                            break;
                        case 2:
                            builder.setLittleEndian(input.readBool());
                            break;
                        case 3:
                            builder.setSizeInBits(input.readInt32());
                            break;
                        case 4:
                            builder.setEncoding(input.readString());
                            break;
                        case 5:
                            builder.setDefaultCalibrator(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.DataEncodingInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.DataEncodingInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.DataEncodingInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.DataEncodingInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.DataEncodingInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.DataEncodingInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.DataEncodingInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.DataEncodingInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "type";
                case 2: return "littleEndian";
                case 3: return "sizeInBits";
                case 4: return "encoding";
                case 5: return "defaultCalibrator";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("type", 1);
            fieldMap.put("littleEndian", 2);
            fieldMap.put("sizeInBits", 3);
            fieldMap.put("encoding", 4);
            fieldMap.put("defaultCalibrator", 5);
        }
    }

    public static final class EnumValue
    {
        public static final org.yamcs.protobuf.SchemaMdb.EnumValue.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.EnumValue.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.EnumValue.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.EnumValue.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.EnumValue>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.EnumValue message) throws java.io.IOException
            {
                if(message.hasValue())
                    output.writeInt64(1, message.getValue(), false);
                if(message.hasLabel())
                    output.writeString(2, message.getLabel(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.EnumValue message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumValue.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumValue.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.EnumValue> typeClass()
            {
                return org.yamcs.protobuf.Mdb.EnumValue.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.EnumValue.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.EnumValue.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.EnumValue message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.EnumValue newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.EnumValue.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.EnumValue.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setValue(input.readInt64());
                            break;
                        case 2:
                            builder.setLabel(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.EnumValue.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.EnumValue.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.EnumValue.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumValue.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.EnumValue.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.EnumValue.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.EnumValue.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.EnumValue.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.EnumValue.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.EnumValue.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "value";
                case 2: return "label";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("value", 1);
            fieldMap.put("label", 2);
        }
    }

    public static final class ParameterTypeInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ParameterTypeInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ParameterTypeInfo message) throws java.io.IOException
            {
                if(message.hasEngType())
                    output.writeString(1, message.getEngType(), false);
                if(message.hasDataEncoding())
                    output.writeObject(2, message.getDataEncoding(), org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.WRITE, false);

                for(org.yamcs.protobuf.Mdb.UnitInfo unitSet : message.getUnitSetList())
                    output.writeObject(3, unitSet, org.yamcs.protobuf.SchemaMdb.UnitInfo.WRITE, true);

                if(message.hasDefaultAlarm())
                    output.writeObject(4, message.getDefaultAlarm(), org.yamcs.protobuf.SchemaMdb.AlarmInfo.WRITE, false);

                for(org.yamcs.protobuf.Mdb.EnumValue enumValue : message.getEnumValueList())
                    output.writeObject(5, enumValue, org.yamcs.protobuf.SchemaMdb.EnumValue.WRITE, true);

            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ParameterTypeInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ParameterTypeInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ParameterTypeInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ParameterTypeInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ParameterTypeInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ParameterTypeInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.ParameterTypeInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ParameterTypeInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ParameterTypeInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setEngType(input.readString());
                            break;
                        case 2:
                            builder.setDataEncoding(input.mergeObject(org.yamcs.protobuf.Mdb.DataEncodingInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.MERGE));

                            break;
                        case 3:
                            builder.addUnitSet(input.mergeObject(org.yamcs.protobuf.Mdb.UnitInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.UnitInfo.MERGE));

                            break;
                        case 4:
                            builder.setDefaultAlarm(input.mergeObject(org.yamcs.protobuf.Mdb.AlarmInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.AlarmInfo.MERGE));

                            break;
                        case 5:
                            builder.addEnumValue(input.mergeObject(org.yamcs.protobuf.Mdb.EnumValue.newBuilder(), org.yamcs.protobuf.SchemaMdb.EnumValue.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ParameterTypeInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.ParameterTypeInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.ParameterTypeInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ParameterTypeInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ParameterTypeInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ParameterTypeInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ParameterTypeInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ParameterTypeInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "engType";
                case 2: return "dataEncoding";
                case 3: return "unitSet";
                case 4: return "defaultAlarm";
                case 5: return "enumValue";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("engType", 1);
            fieldMap.put("dataEncoding", 2);
            fieldMap.put("unitSet", 3);
            fieldMap.put("defaultAlarm", 4);
            fieldMap.put("enumValue", 5);
        }
    }

    public static final class ParameterInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.ParameterInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.ParameterInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.ParameterInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.ParameterInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ParameterInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ParameterInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasQualifiedName())
                    output.writeString(2, message.getQualifiedName(), false);
                if(message.hasShortDescription())
                    output.writeString(3, message.getShortDescription(), false);
                if(message.hasLongDescription())
                    output.writeString(4, message.getLongDescription(), false);
                for(org.yamcs.protobuf.Yamcs.NamedObjectId alias : message.getAliasList())
                    output.writeObject(5, alias, org.yamcs.protobuf.SchemaYamcs.NamedObjectId.WRITE, true);

                if(message.hasType())
                    output.writeObject(6, message.getType(), org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.WRITE, false);

                if(message.hasDataSource())
                    output.writeString(7, message.getDataSource().name(), false);
                if(message.hasUrl())
                    output.writeString(8, message.getUrl(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ParameterInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ParameterInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ParameterInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ParameterInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ParameterInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ParameterInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.ParameterInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ParameterInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ParameterInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setQualifiedName(input.readString());
                            break;
                        case 3:
                            builder.setShortDescription(input.readString());
                            break;
                        case 4:
                            builder.setLongDescription(input.readString());
                            break;
                        case 5:
                            builder.addAlias(input.mergeObject(org.yamcs.protobuf.Yamcs.NamedObjectId.newBuilder(), org.yamcs.protobuf.SchemaYamcs.NamedObjectId.MERGE));

                            break;
                        case 6:
                            builder.setType(input.mergeObject(org.yamcs.protobuf.Mdb.ParameterTypeInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ParameterTypeInfo.MERGE));

                            break;
                        case 7:
                            builder.setDataSource(org.yamcs.protobuf.Mdb.DataSourceType.valueOf(input.readString()));
                            break;
                        case 8:
                            builder.setUrl(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ParameterInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.ParameterInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.ParameterInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ParameterInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ParameterInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ParameterInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ParameterInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ParameterInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ParameterInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "qualifiedName";
                case 3: return "shortDescription";
                case 4: return "longDescription";
                case 5: return "alias";
                case 6: return "type";
                case 7: return "dataSource";
                case 8: return "url";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("qualifiedName", 2);
            fieldMap.put("shortDescription", 3);
            fieldMap.put("longDescription", 4);
            fieldMap.put("alias", 5);
            fieldMap.put("type", 6);
            fieldMap.put("dataSource", 7);
            fieldMap.put("url", 8);
        }
    }

    public static final class ArgumentTypeInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ArgumentTypeInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ArgumentTypeInfo message) throws java.io.IOException
            {
                if(message.hasEngType())
                    output.writeString(1, message.getEngType(), false);
                if(message.hasDataEncoding())
                    output.writeObject(2, message.getDataEncoding(), org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.WRITE, false);

                for(org.yamcs.protobuf.Mdb.UnitInfo unitSet : message.getUnitSetList())
                    output.writeObject(3, unitSet, org.yamcs.protobuf.SchemaMdb.UnitInfo.WRITE, true);

                for(org.yamcs.protobuf.Mdb.EnumValue enumValue : message.getEnumValueList())
                    output.writeObject(5, enumValue, org.yamcs.protobuf.SchemaMdb.EnumValue.WRITE, true);

                if(message.hasRangeMin())
                    output.writeDouble(6, message.getRangeMin(), false);
                if(message.hasRangeMax())
                    output.writeDouble(7, message.getRangeMax(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ArgumentTypeInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ArgumentTypeInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ArgumentTypeInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentTypeInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentTypeInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ArgumentTypeInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.ArgumentTypeInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ArgumentTypeInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ArgumentTypeInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setEngType(input.readString());
                            break;
                        case 2:
                            builder.setDataEncoding(input.mergeObject(org.yamcs.protobuf.Mdb.DataEncodingInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.DataEncodingInfo.MERGE));

                            break;
                        case 3:
                            builder.addUnitSet(input.mergeObject(org.yamcs.protobuf.Mdb.UnitInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.UnitInfo.MERGE));

                            break;
                        case 5:
                            builder.addEnumValue(input.mergeObject(org.yamcs.protobuf.Mdb.EnumValue.newBuilder(), org.yamcs.protobuf.SchemaMdb.EnumValue.MERGE));

                            break;
                        case 6:
                            builder.setRangeMin(input.readDouble());
                            break;
                        case 7:
                            builder.setRangeMax(input.readDouble());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ArgumentTypeInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.ArgumentTypeInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.ArgumentTypeInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ArgumentTypeInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ArgumentTypeInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentTypeInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentTypeInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ArgumentTypeInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "engType";
                case 2: return "dataEncoding";
                case 3: return "unitSet";
                case 5: return "enumValue";
                case 6: return "rangeMin";
                case 7: return "rangeMax";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("engType", 1);
            fieldMap.put("dataEncoding", 2);
            fieldMap.put("unitSet", 3);
            fieldMap.put("enumValue", 5);
            fieldMap.put("rangeMin", 6);
            fieldMap.put("rangeMax", 7);
        }
    }

    public static final class ArgumentInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.ArgumentInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.ArgumentInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.ArgumentInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.ArgumentInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ArgumentInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ArgumentInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasDescription())
                    output.writeString(2, message.getDescription(), false);
                if(message.hasInitialValue())
                    output.writeString(4, message.getInitialValue(), false);
                if(message.hasType())
                    output.writeObject(6, message.getType(), org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.WRITE, false);

            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ArgumentInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ArgumentInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ArgumentInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ArgumentInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.ArgumentInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ArgumentInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ArgumentInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setDescription(input.readString());
                            break;
                        case 4:
                            builder.setInitialValue(input.readString());
                            break;
                        case 6:
                            builder.setType(input.mergeObject(org.yamcs.protobuf.Mdb.ArgumentTypeInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ArgumentTypeInfo.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ArgumentInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.ArgumentInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.ArgumentInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ArgumentInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ArgumentInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ArgumentInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "description";
                case 4: return "initialValue";
                case 6: return "type";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("description", 2);
            fieldMap.put("initialValue", 4);
            fieldMap.put("type", 6);
        }
    }

    public static final class ArgumentAssignmentInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasValue())
                    output.writeString(2, message.getValue(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setValue(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "value";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("value", 2);
        }
    }

    public static final class SignificanceInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.SignificanceInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.SignificanceInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.SignificanceInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.SignificanceInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.SignificanceInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.SignificanceInfo message) throws java.io.IOException
            {
                if(message.hasConsequenceLevel())
                    output.writeString(1, message.getConsequenceLevel().name(), false);
                if(message.hasReasonForWarning())
                    output.writeString(2, message.getReasonForWarning(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.SignificanceInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.SignificanceInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.SignificanceInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.SignificanceInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.SignificanceInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.SignificanceInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.SignificanceInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.SignificanceInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.SignificanceInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.SignificanceInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.SignificanceInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setConsequenceLevel(org.yamcs.protobuf.Mdb.SignificanceInfo.SignificanceLevelType.valueOf(input.readString()));
                            break;
                        case 2:
                            builder.setReasonForWarning(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.SignificanceInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.SignificanceInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.SignificanceInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.SignificanceInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.SignificanceInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.SignificanceInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.SignificanceInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.SignificanceInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.SignificanceInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.SignificanceInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "consequenceLevel";
                case 2: return "reasonForWarning";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("consequenceLevel", 1);
            fieldMap.put("reasonForWarning", 2);
        }
    }

    public static final class ComparisonInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.ComparisonInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.ComparisonInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.ComparisonInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.ComparisonInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ComparisonInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ComparisonInfo message) throws java.io.IOException
            {
                if(message.hasParameter())
                    output.writeObject(1, message.getParameter(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.WRITE, false);

                if(message.hasOperator())
                    output.writeString(2, message.getOperator().name(), false);
                if(message.hasValue())
                    output.writeString(3, message.getValue(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ComparisonInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ComparisonInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ComparisonInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ComparisonInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ComparisonInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ComparisonInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ComparisonInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ComparisonInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.ComparisonInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ComparisonInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ComparisonInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setParameter(input.mergeObject(org.yamcs.protobuf.Mdb.ParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.MERGE));

                            break;
                        case 2:
                            builder.setOperator(org.yamcs.protobuf.Mdb.ComparisonInfo.OperatorType.valueOf(input.readString()));
                            break;
                        case 3:
                            builder.setValue(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ComparisonInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.ComparisonInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.ComparisonInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ComparisonInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ComparisonInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ComparisonInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ComparisonInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ComparisonInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ComparisonInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ComparisonInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "parameter";
                case 2: return "operator";
                case 3: return "value";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("parameter", 1);
            fieldMap.put("operator", 2);
            fieldMap.put("value", 3);
        }
    }

    public static final class TransmissionConstraintInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.TransmissionConstraintInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.TransmissionConstraintInfo message) throws java.io.IOException
            {
                for(org.yamcs.protobuf.Mdb.ComparisonInfo comparison : message.getComparisonList())
                    output.writeObject(1, comparison, org.yamcs.protobuf.SchemaMdb.ComparisonInfo.WRITE, true);

                if(message.hasTimeout())
                    output.writeInt64(2, message.getTimeout(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.TransmissionConstraintInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.TransmissionConstraintInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.TransmissionConstraintInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.TransmissionConstraintInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.addComparison(input.mergeObject(org.yamcs.protobuf.Mdb.ComparisonInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ComparisonInfo.MERGE));

                            break;
                        case 2:
                            builder.setTimeout(input.readInt64());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "comparison";
                case 2: return "timeout";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("comparison", 1);
            fieldMap.put("timeout", 2);
        }
    }

    public static final class CommandInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.CommandInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.CommandInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.CommandInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.CommandInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.CommandInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.CommandInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasQualifiedName())
                    output.writeString(2, message.getQualifiedName(), false);
                if(message.hasShortDescription())
                    output.writeString(3, message.getShortDescription(), false);
                if(message.hasLongDescription())
                    output.writeString(4, message.getLongDescription(), false);
                for(org.yamcs.protobuf.Yamcs.NamedObjectId alias : message.getAliasList())
                    output.writeObject(5, alias, org.yamcs.protobuf.SchemaYamcs.NamedObjectId.WRITE, true);

                if(message.hasBaseCommand())
                    output.writeObject(6, message.getBaseCommand(), org.yamcs.protobuf.SchemaMdb.CommandInfo.WRITE, false);

                if(message.hasAbstract())
                    output.writeBool(7, message.getAbstract(), false);
                for(org.yamcs.protobuf.Mdb.ArgumentInfo argument : message.getArgumentList())
                    output.writeObject(8, argument, org.yamcs.protobuf.SchemaMdb.ArgumentInfo.WRITE, true);

                for(org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo argumentAssignment : message.getArgumentAssignmentList())
                    output.writeObject(9, argumentAssignment, org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.WRITE, true);

                if(message.hasSignificance())
                    output.writeObject(10, message.getSignificance(), org.yamcs.protobuf.SchemaMdb.SignificanceInfo.WRITE, false);

                for(org.yamcs.protobuf.Mdb.TransmissionConstraintInfo constraint : message.getConstraintList())
                    output.writeObject(11, constraint, org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.WRITE, true);

                if(message.hasUrl())
                    output.writeString(12, message.getUrl(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.CommandInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.CommandInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.CommandInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.CommandInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.CommandInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.CommandInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.CommandInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.CommandInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.CommandInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.CommandInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.CommandInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setQualifiedName(input.readString());
                            break;
                        case 3:
                            builder.setShortDescription(input.readString());
                            break;
                        case 4:
                            builder.setLongDescription(input.readString());
                            break;
                        case 5:
                            builder.addAlias(input.mergeObject(org.yamcs.protobuf.Yamcs.NamedObjectId.newBuilder(), org.yamcs.protobuf.SchemaYamcs.NamedObjectId.MERGE));

                            break;
                        case 6:
                            builder.setBaseCommand(input.mergeObject(org.yamcs.protobuf.Mdb.CommandInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.CommandInfo.MERGE));

                            break;
                        case 7:
                            builder.setAbstract(input.readBool());
                            break;
                        case 8:
                            builder.addArgument(input.mergeObject(org.yamcs.protobuf.Mdb.ArgumentInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ArgumentInfo.MERGE));

                            break;
                        case 9:
                            builder.addArgumentAssignment(input.mergeObject(org.yamcs.protobuf.Mdb.ArgumentAssignmentInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ArgumentAssignmentInfo.MERGE));

                            break;
                        case 10:
                            builder.setSignificance(input.mergeObject(org.yamcs.protobuf.Mdb.SignificanceInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.SignificanceInfo.MERGE));

                            break;
                        case 11:
                            builder.addConstraint(input.mergeObject(org.yamcs.protobuf.Mdb.TransmissionConstraintInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.TransmissionConstraintInfo.MERGE));

                            break;
                        case 12:
                            builder.setUrl(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.CommandInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.CommandInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.CommandInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.CommandInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.CommandInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.CommandInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.CommandInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.CommandInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.CommandInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.CommandInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "qualifiedName";
                case 3: return "shortDescription";
                case 4: return "longDescription";
                case 5: return "alias";
                case 6: return "baseCommand";
                case 7: return "abstract";
                case 8: return "argument";
                case 9: return "argumentAssignment";
                case 10: return "significance";
                case 11: return "constraint";
                case 12: return "url";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("qualifiedName", 2);
            fieldMap.put("shortDescription", 3);
            fieldMap.put("longDescription", 4);
            fieldMap.put("alias", 5);
            fieldMap.put("baseCommand", 6);
            fieldMap.put("abstract", 7);
            fieldMap.put("argument", 8);
            fieldMap.put("argumentAssignment", 9);
            fieldMap.put("significance", 10);
            fieldMap.put("constraint", 11);
            fieldMap.put("url", 12);
        }
    }

    public static final class RepeatInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.RepeatInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.RepeatInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.RepeatInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.RepeatInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.RepeatInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.RepeatInfo message) throws java.io.IOException
            {
                if(message.hasFixedCount())
                    output.writeInt64(1, message.getFixedCount(), false);
                if(message.hasDynamicCount())
                    output.writeObject(2, message.getDynamicCount(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.WRITE, false);

                if(message.hasBitsBetween())
                    output.writeInt32(3, message.getBitsBetween(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.RepeatInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.RepeatInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.RepeatInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.RepeatInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.RepeatInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.RepeatInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.RepeatInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.RepeatInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.RepeatInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.RepeatInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.RepeatInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setFixedCount(input.readInt64());
                            break;
                        case 2:
                            builder.setDynamicCount(input.mergeObject(org.yamcs.protobuf.Mdb.ParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.MERGE));

                            break;
                        case 3:
                            builder.setBitsBetween(input.readInt32());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.RepeatInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.RepeatInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.RepeatInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.RepeatInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.RepeatInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.RepeatInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.RepeatInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.RepeatInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.RepeatInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.RepeatInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "fixedCount";
                case 2: return "dynamicCount";
                case 3: return "bitsBetween";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("fixedCount", 1);
            fieldMap.put("dynamicCount", 2);
            fieldMap.put("bitsBetween", 3);
        }
    }

    public static final class SequenceEntryInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.SequenceEntryInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.SequenceEntryInfo message) throws java.io.IOException
            {
                if(message.hasLocationInBits())
                    output.writeInt32(1, message.getLocationInBits(), false);
                if(message.hasReferenceLocation())
                    output.writeString(2, message.getReferenceLocation().name(), false);
                if(message.hasContainer())
                    output.writeObject(3, message.getContainer(), org.yamcs.protobuf.SchemaMdb.ContainerInfo.WRITE, false);

                if(message.hasParameter())
                    output.writeObject(4, message.getParameter(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.WRITE, false);

                if(message.hasRepeat())
                    output.writeObject(5, message.getRepeat(), org.yamcs.protobuf.SchemaMdb.RepeatInfo.WRITE, false);

            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.SequenceEntryInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.SequenceEntryInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.SequenceEntryInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.SequenceEntryInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.SequenceEntryInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.SequenceEntryInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.SequenceEntryInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.SequenceEntryInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.SequenceEntryInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setLocationInBits(input.readInt32());
                            break;
                        case 2:
                            builder.setReferenceLocation(org.yamcs.protobuf.Mdb.SequenceEntryInfo.ReferenceLocationType.valueOf(input.readString()));
                            break;
                        case 3:
                            builder.setContainer(input.mergeObject(org.yamcs.protobuf.Mdb.ContainerInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ContainerInfo.MERGE));

                            break;
                        case 4:
                            builder.setParameter(input.mergeObject(org.yamcs.protobuf.Mdb.ParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.MERGE));

                            break;
                        case 5:
                            builder.setRepeat(input.mergeObject(org.yamcs.protobuf.Mdb.RepeatInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.RepeatInfo.MERGE));

                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.SequenceEntryInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.SequenceEntryInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.SequenceEntryInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.SequenceEntryInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.SequenceEntryInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.SequenceEntryInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.SequenceEntryInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.SequenceEntryInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "locationInBits";
                case 2: return "referenceLocation";
                case 3: return "container";
                case 4: return "parameter";
                case 5: return "repeat";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("locationInBits", 1);
            fieldMap.put("referenceLocation", 2);
            fieldMap.put("container", 3);
            fieldMap.put("parameter", 4);
            fieldMap.put("repeat", 5);
        }
    }

    public static final class ContainerInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.ContainerInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.ContainerInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.ContainerInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.ContainerInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ContainerInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ContainerInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasQualifiedName())
                    output.writeString(2, message.getQualifiedName(), false);
                if(message.hasShortDescription())
                    output.writeString(3, message.getShortDescription(), false);
                if(message.hasLongDescription())
                    output.writeString(4, message.getLongDescription(), false);
                for(org.yamcs.protobuf.Yamcs.NamedObjectId alias : message.getAliasList())
                    output.writeObject(5, alias, org.yamcs.protobuf.SchemaYamcs.NamedObjectId.WRITE, true);

                if(message.hasMaxInterval())
                    output.writeInt64(6, message.getMaxInterval(), false);
                if(message.hasSizeInBits())
                    output.writeInt32(7, message.getSizeInBits(), false);
                if(message.hasBaseContainer())
                    output.writeObject(8, message.getBaseContainer(), org.yamcs.protobuf.SchemaMdb.ContainerInfo.WRITE, false);

                for(org.yamcs.protobuf.Mdb.ComparisonInfo restrictionCriteria : message.getRestrictionCriteriaList())
                    output.writeObject(9, restrictionCriteria, org.yamcs.protobuf.SchemaMdb.ComparisonInfo.WRITE, true);

                for(org.yamcs.protobuf.Mdb.SequenceEntryInfo entry : message.getEntryList())
                    output.writeObject(10, entry, org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.WRITE, true);

                if(message.hasUrl())
                    output.writeString(11, message.getUrl(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ContainerInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ContainerInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ContainerInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ContainerInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ContainerInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ContainerInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ContainerInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ContainerInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.ContainerInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.ContainerInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.ContainerInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setQualifiedName(input.readString());
                            break;
                        case 3:
                            builder.setShortDescription(input.readString());
                            break;
                        case 4:
                            builder.setLongDescription(input.readString());
                            break;
                        case 5:
                            builder.addAlias(input.mergeObject(org.yamcs.protobuf.Yamcs.NamedObjectId.newBuilder(), org.yamcs.protobuf.SchemaYamcs.NamedObjectId.MERGE));

                            break;
                        case 6:
                            builder.setMaxInterval(input.readInt64());
                            break;
                        case 7:
                            builder.setSizeInBits(input.readInt32());
                            break;
                        case 8:
                            builder.setBaseContainer(input.mergeObject(org.yamcs.protobuf.Mdb.ContainerInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ContainerInfo.MERGE));

                            break;
                        case 9:
                            builder.addRestrictionCriteria(input.mergeObject(org.yamcs.protobuf.Mdb.ComparisonInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ComparisonInfo.MERGE));

                            break;
                        case 10:
                            builder.addEntry(input.mergeObject(org.yamcs.protobuf.Mdb.SequenceEntryInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.SequenceEntryInfo.MERGE));

                            break;
                        case 11:
                            builder.setUrl(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.ContainerInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.ContainerInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.ContainerInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.ContainerInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.ContainerInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.ContainerInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.ContainerInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.ContainerInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.ContainerInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.ContainerInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "qualifiedName";
                case 3: return "shortDescription";
                case 4: return "longDescription";
                case 5: return "alias";
                case 6: return "maxInterval";
                case 7: return "sizeInBits";
                case 8: return "baseContainer";
                case 9: return "restrictionCriteria";
                case 10: return "entry";
                case 11: return "url";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("qualifiedName", 2);
            fieldMap.put("shortDescription", 3);
            fieldMap.put("longDescription", 4);
            fieldMap.put("alias", 5);
            fieldMap.put("maxInterval", 6);
            fieldMap.put("sizeInBits", 7);
            fieldMap.put("baseContainer", 8);
            fieldMap.put("restrictionCriteria", 9);
            fieldMap.put("entry", 10);
            fieldMap.put("url", 11);
        }
    }

    public static final class InputParameterInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.InputParameterInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.InputParameterInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.InputParameterInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.InputParameterInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.InputParameterInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.InputParameterInfo message) throws java.io.IOException
            {
                if(message.hasParameter())
                    output.writeObject(1, message.getParameter(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.WRITE, false);

                if(message.hasInputName())
                    output.writeString(2, message.getInputName(), false);
                if(message.hasParameterInstance())
                    output.writeInt32(3, message.getParameterInstance(), false);
                if(message.hasMandatory())
                    output.writeBool(4, message.getMandatory(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.InputParameterInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.InputParameterInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.InputParameterInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.InputParameterInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.InputParameterInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.InputParameterInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.InputParameterInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.InputParameterInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.InputParameterInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.InputParameterInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.InputParameterInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setParameter(input.mergeObject(org.yamcs.protobuf.Mdb.ParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.MERGE));

                            break;
                        case 2:
                            builder.setInputName(input.readString());
                            break;
                        case 3:
                            builder.setParameterInstance(input.readInt32());
                            break;
                        case 4:
                            builder.setMandatory(input.readBool());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.InputParameterInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.InputParameterInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.InputParameterInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.InputParameterInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.InputParameterInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.InputParameterInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.InputParameterInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.InputParameterInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.InputParameterInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.InputParameterInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "parameter";
                case 2: return "inputName";
                case 3: return "parameterInstance";
                case 4: return "mandatory";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("parameter", 1);
            fieldMap.put("inputName", 2);
            fieldMap.put("parameterInstance", 3);
            fieldMap.put("mandatory", 4);
        }
    }

    public static final class OutputParameterInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.OutputParameterInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.OutputParameterInfo message) throws java.io.IOException
            {
                if(message.hasParameter())
                    output.writeObject(1, message.getParameter(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.WRITE, false);

                if(message.hasOutputName())
                    output.writeString(2, message.getOutputName(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.OutputParameterInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.OutputParameterInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.OutputParameterInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.OutputParameterInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.OutputParameterInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.OutputParameterInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.OutputParameterInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.OutputParameterInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.OutputParameterInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setParameter(input.mergeObject(org.yamcs.protobuf.Mdb.ParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.MERGE));

                            break;
                        case 2:
                            builder.setOutputName(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.OutputParameterInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.OutputParameterInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.OutputParameterInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.OutputParameterInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.OutputParameterInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.OutputParameterInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.OutputParameterInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.OutputParameterInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "parameter";
                case 2: return "outputName";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("parameter", 1);
            fieldMap.put("outputName", 2);
        }
    }

    public static final class AlgorithmInfo
    {
        public static final org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.MessageSchema WRITE =
            new org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.MessageSchema();
        public static final org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.BuilderSchema MERGE =
            new org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.BuilderSchema();
        
        public static class MessageSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.AlgorithmInfo>
        {
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.AlgorithmInfo message) throws java.io.IOException
            {
                if(message.hasName())
                    output.writeString(1, message.getName(), false);
                if(message.hasQualifiedName())
                    output.writeString(2, message.getQualifiedName(), false);
                if(message.hasShortDescription())
                    output.writeString(3, message.getShortDescription(), false);
                if(message.hasLongDescription())
                    output.writeString(4, message.getLongDescription(), false);
                for(org.yamcs.protobuf.Yamcs.NamedObjectId alias : message.getAliasList())
                    output.writeObject(5, alias, org.yamcs.protobuf.SchemaYamcs.NamedObjectId.WRITE, true);

                if(message.hasScope())
                    output.writeString(6, message.getScope().name(), false);
                if(message.hasLanguage())
                    output.writeString(7, message.getLanguage(), false);
                if(message.hasText())
                    output.writeString(8, message.getText(), false);
                for(org.yamcs.protobuf.Mdb.InputParameterInfo inputParameter : message.getInputParameterList())
                    output.writeObject(9, inputParameter, org.yamcs.protobuf.SchemaMdb.InputParameterInfo.WRITE, true);

                for(org.yamcs.protobuf.Mdb.OutputParameterInfo outputParameter : message.getOutputParameterList())
                    output.writeObject(10, outputParameter, org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.WRITE, true);

                for(org.yamcs.protobuf.Mdb.ParameterInfo onParameterUpdate : message.getOnParameterUpdateList())
                    output.writeObject(11, onParameterUpdate, org.yamcs.protobuf.SchemaMdb.ParameterInfo.WRITE, true);

                for(long onPeriodicRate : message.getOnPeriodicRateList())
                    output.writeInt64(12, onPeriodicRate, true);
                if(message.hasUrl())
                    output.writeString(13, message.getUrl(), false);
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.AlgorithmInfo message)
            {
                return message.isInitialized();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.AlgorithmInfo> typeClass()
            {
                return org.yamcs.protobuf.Mdb.AlgorithmInfo.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.AlgorithmInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.AlgorithmInfo.class.getName();
            }
            //unused
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.AlgorithmInfo message) throws java.io.IOException {}
            public org.yamcs.protobuf.Mdb.AlgorithmInfo newMessage() { return null; }
        }
        public static class BuilderSchema implements io.protostuff.Schema<org.yamcs.protobuf.Mdb.AlgorithmInfo.Builder>
        {
            public void mergeFrom(io.protostuff.Input input, org.yamcs.protobuf.Mdb.AlgorithmInfo.Builder builder) throws java.io.IOException
            {
                for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
                {
                    switch(number)
                    {
                        case 0:
                            return;
                        case 1:
                            builder.setName(input.readString());
                            break;
                        case 2:
                            builder.setQualifiedName(input.readString());
                            break;
                        case 3:
                            builder.setShortDescription(input.readString());
                            break;
                        case 4:
                            builder.setLongDescription(input.readString());
                            break;
                        case 5:
                            builder.addAlias(input.mergeObject(org.yamcs.protobuf.Yamcs.NamedObjectId.newBuilder(), org.yamcs.protobuf.SchemaYamcs.NamedObjectId.MERGE));

                            break;
                        case 6:
                            builder.setScope(org.yamcs.protobuf.Mdb.AlgorithmInfo.Scope.valueOf(input.readString()));
                            break;
                        case 7:
                            builder.setLanguage(input.readString());
                            break;
                        case 8:
                            builder.setText(input.readString());
                            break;
                        case 9:
                            builder.addInputParameter(input.mergeObject(org.yamcs.protobuf.Mdb.InputParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.InputParameterInfo.MERGE));

                            break;
                        case 10:
                            builder.addOutputParameter(input.mergeObject(org.yamcs.protobuf.Mdb.OutputParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.OutputParameterInfo.MERGE));

                            break;
                        case 11:
                            builder.addOnParameterUpdate(input.mergeObject(org.yamcs.protobuf.Mdb.ParameterInfo.newBuilder(), org.yamcs.protobuf.SchemaMdb.ParameterInfo.MERGE));

                            break;
                        case 12:
                            builder.addOnPeriodicRate(input.readInt64());
                            break;
                        case 13:
                            builder.setUrl(input.readString());
                            break;
                        default:
                            input.handleUnknownField(number, this);
                    }
                }
            }
            public boolean isInitialized(org.yamcs.protobuf.Mdb.AlgorithmInfo.Builder builder)
            {
                return builder.isInitialized();
            }
            public org.yamcs.protobuf.Mdb.AlgorithmInfo.Builder newMessage()
            {
                return org.yamcs.protobuf.Mdb.AlgorithmInfo.newBuilder();
            }
            public java.lang.String getFieldName(int number)
            {
                return org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.getFieldName(number);
            }
            public int getFieldNumber(java.lang.String name)
            {
                return org.yamcs.protobuf.SchemaMdb.AlgorithmInfo.getFieldNumber(name);
            }
            public java.lang.Class<org.yamcs.protobuf.Mdb.AlgorithmInfo.Builder> typeClass()
            {
                return org.yamcs.protobuf.Mdb.AlgorithmInfo.Builder.class;
            }
            public java.lang.String messageName()
            {
                return org.yamcs.protobuf.Mdb.AlgorithmInfo.class.getSimpleName();
            }
            public java.lang.String messageFullName()
            {
                return org.yamcs.protobuf.Mdb.AlgorithmInfo.class.getName();
            }
            //unused
            public void writeTo(io.protostuff.Output output, org.yamcs.protobuf.Mdb.AlgorithmInfo.Builder builder) throws java.io.IOException {}
        }
        public static java.lang.String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "name";
                case 2: return "qualifiedName";
                case 3: return "shortDescription";
                case 4: return "longDescription";
                case 5: return "alias";
                case 6: return "scope";
                case 7: return "language";
                case 8: return "text";
                case 9: return "inputParameter";
                case 10: return "outputParameter";
                case 11: return "onParameterUpdate";
                case 12: return "onPeriodicRate";
                case 13: return "url";
                default: return null;
            }
        }
        public static int getFieldNumber(java.lang.String name)
        {
            java.lang.Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }
        private static final java.util.HashMap<java.lang.String,java.lang.Integer> fieldMap = new java.util.HashMap<java.lang.String,java.lang.Integer>();
        static
        {
            fieldMap.put("name", 1);
            fieldMap.put("qualifiedName", 2);
            fieldMap.put("shortDescription", 3);
            fieldMap.put("longDescription", 4);
            fieldMap.put("alias", 5);
            fieldMap.put("scope", 6);
            fieldMap.put("language", 7);
            fieldMap.put("text", 8);
            fieldMap.put("inputParameter", 9);
            fieldMap.put("outputParameter", 10);
            fieldMap.put("onParameterUpdate", 11);
            fieldMap.put("onPeriodicRate", 12);
            fieldMap.put("url", 13);
        }
    }

}
