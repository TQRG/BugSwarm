<sect1 id="dass-pp-mapping">
    <title>DaSS PP mapping</title>
    <screen>
try {
        if ((di.getValueState()==ProcessedDataItem.VALUE_STATE_NO_VALUE) ||
                (di.getValueState()==ProcessedDataItem.VALUE_STATE_UNCHANGED)||
                (di.getValueState()==ProcessedDataItem.VALUE_STATE_UNAVAILABLE)) {
                return null;
        }
        if (di.isRemoteServiceUnavailable()) {
                pv.setAcquisitionStatus(AcquisitionStatus.INVALID);
                pv.setProcessingStatus(false);
                pv.getEngValue().integerValue(0);
        } else {
                if (di.isDead())
                        pv.setAcquisitionStatus(AcquisitionStatus.DATA_INTERRUPTION);
                if (di.isStatic())
                        pv.setAcquisitionStatus(AcquisitionStatus.STATIC);
                if (di.isMissing())
                        pv.setAcquisitionStatus(AcquisitionStatus.NOT_ACQUIRED);
                if (di.isOffScaleHigh())
                        pv.setMonitoringResult(MonitoringResults.NOMINAL_HIGH_LIMIT_VIOLATION);
                if (di.isOffScaleLow())
                        pv.setMonitoringResult(MonitoringResults.NOMINAL_LOW_LIMIT_VIOLATION);
                //the different types are described into the UMI Catalogue IDD downloadable
                //from the www2.gsoc.dlr.de website
                switch(di.getDataType()) {
                        case 1: //32 bit, signed integer number
                        pv.getEngValue().integerValue(di.getIntValue());
                        break;
                case 2: //64 bit floating point number
                        pv.getEngValue().doubleValue(di.getDoubleValue());
                        break;
                case 5: //8 byte ASCII code
                case 12: // Variable length ASCII string
                        pv.getEngValue().stateCodeValue(new String(di.getRawValue()));
                break;
                case 3: //binary code (bit pattern)
                case 4: //text value reference
                case 6: // 64 bit integer number
                case 7: // binary-decimal: integer number150 RSA use only
                case 8: // binary-decimal: floating point decimal number150 RSA use only
                case 9: // binary-decimal: integer with exponent number150 RSA use only
                case 10: // binary-decimal: time
                case 11: // Binary-decimal: date-time
                case 13: // Variable length binary data string
                case 14: // 1 byte binary
                case 15: // HOSC TECT timevalue (40 byte)
                case 255: // Unprocessed parameter value
                        pv.getEngValue().binaryValue(di.getRawValue());
                        break;
                default:
                        pv.setAcquisitionStatus(AcquisitionStatus.INVALID);
                        pv.setProcessingStatus(false);
                        pv.getEngValue().integerValue(0);
                }
        }
} catch (Exception e) {
        pv.setAcquisitionStatus(AcquisitionStatus.INVALID);
        pv.setProcessingStatus(false);
        pv.getEngValue().integerValue(0);
        e.printStackTrace();
}
        </screen>
        
        
</sect1>