@startuml

actor Application
note right of Application : Actors, Observers

database databases
entity MMS
usecase "Dependency Injection" as DependencyInjection
artifact Stage {
    artifact "Message Pipeline" as MessagePipeline  {
        interface " " as Head
        note right of Head : Head of the protocol stack
        agent Caching #LightBlue
        agent Execution #LightBlue
        agent Hosting #LightBlue
        agent MessageLoopback #LightBlue
        agent Messaging #LightBlue
        agent MessageSerializer
        agent ClusterPeer
        note right of Caching : Cache responses
        note right of Execution : Method Invocation
        note right of Messaging {
            Tracks responses,
            Adds messageId
        }
        note right of MessageLoopback : Bounces up local messages.
        note right of MessageSerializer : Serialization, Replaceable
        note right of ClusterPeer : JGroupsClusterPeer, Replaceable
        note right of Hosting : Group coordination, locates actors
    }
    artifact "Components"  {
        agent LocalObjects #LightBlue
        agent ExecutionSerializer #LightBlue
        agent Timer #LightBlue
        agent ReminderController #LightBlue
        agent ExecutorService
        agent Clock
    }
    artifact "Extensions"  {
        agent ActorFinder
        agent LoggerExtension
        agent StreamProviders
        agent StorageExtensions
        agent PipelineExtensions
        agent LifetimeExtensions
    }
    Extensions -down-- Components
    ' MessagePipeline - PipelineExtensions
    databases -- StorageExtensions
    MMS -- StreamProviders
    DependencyInjection -- LifetimeExtensions
'    note right of ActorFinder {
'        can be used with containers
'    }
}
cloud Network

Application --> Head : [ invokeRemote ]
Head --> Caching : [ write ]
Caching --> Execution : [ write ]
Execution --> Hosting  : [ write ]
Hosting --> Messaging  : [ write ]
Messaging --> MessageLoopback  : [ write ]
MessageLoopback --> MessageSerializer  : [ write ]
MessageSerializer --> ClusterPeer : [ write ]
ClusterPeer --> Network : [ send group message (bytes) ]

Network --> ClusterPeer : [ receive group message (bytes) ]
ClusterPeer --> MessageSerializer : [ onRead  ]
MessageSerializer --> MessageLoopback  : [ onRead  ]
MessageLoopback --> Messaging  : [ onRead  ]
Hosting --> Execution  : [ onRead  ]
Messaging --> Hosting  : [ onRead (ClusterView) ]
Execution --> Caching : [ response ]
Caching --> Head : [ response ]
Head --> Application : [ response ]

@enduml