rule.php.S107.param.max=Maximum authorized number of parameters
rule.php.S1479.param.max=Maximum number of case
rule.php.S1151.param.max=Maximum number of lines
rule.php.S1142.param.max=Maximum allowed return statements per function
rule.php.S100.param.format=Regular expression used to check the function names against
rule.php.S139.param.legalTrailingCommentPattern=Pattern for text of trailing comments that are allowed. By default, comments containing only one word.
rule.php.S104.param.max=Maximum authorized lines in a file.
rule.php.S103.param.maximumLineLength=The maximum authorized line length.
rule.php.S134.param.max=Maximum allowed control flow statement nesting depth.
rule.php.S1192.param.threshold=Number of times a literal must be duplicated to trigger an issue
rule.php.S1541.param.threshold=The maximum authorized complexity.
rule.php.S1451.param.headerFormat=Expected copyright and license header (plain text)
rule.php.S101.param.format=Regular expression used to check the class names against.
rule.php.S116.param.format=Regular expression used to check the field names against.
rule.php.S1067.param.max=Maximum number of allowed conditional operators in an expression
rule.php.S115.param.format=Regular expression used to check the constant names against.
rule.php.S138.param.max=Maximum authorized lines in a function
rule.php.S1448.param.maximumMethodThreshold=The maximum number of methods
rule.php.S1448.param.countNonpublicMethods=Whether or not to include non-public methods in the count
rule.php.S1311.param.max=Maximum complexity allowed.
rule.php.S1200.param.max=Maximum number of classes a single class is allowed to depend upon
rule.php.S117.param.format=Regular expression used to check the names against.
rule.php.S1488.name=Local variables should not be declared and then immediately returned or thrown
rule.php.S125.name=Sections of code should not be "commented out"
rule.php.S1793.name="elseif" keyword should be used in place of "else if" keywords
rule.php.S1799.name="exit(...)" and "die(...)" statements should not be used
rule.php.S1765.name=The "var" keyword should not be used
rule.php.S1784.name=Method visibility should be explicitly declared
rule.php.S1781.name=PHP keywords and constants "true", "false", "null" should be in lower case
rule.php.S1766.name=More than one property should not be declared per statement
rule.php.S1124.name=Modifiers should be declared in the correct order
rule.php.S1780.name=Closing tag "?>" should be omitted on files containing only PHP
rule.php.S1779.name=Only LF character (Unix-like) should be used to end lines
rule.php.S1788.name=Method arguments with default value should be last
rule.php.S1808.name=Source code should comply with formatting standards
rule.php.S1808.param.namespace_blank_line== "namespace" declarations should be followed by a blank line\n\
== Noncompliant Code Example\n\
``php\n\
namespace Vendor\\Package;\n\
use FooClass;\n\
``\n\
== Compliant Solution\n\
``\n\
namespace Vendor\\Package;\n\
\n\
use FooClass;\n\
``
rule.php.S1808.param.use_after_namespace== "use" declarations should be placed after "namespace" declarations\n\
== Noncompliant Code Example\n\
``php\n\
use FooClass;\n\
\n\
namespace Vendor\\Package;\n\
``\n\
== Compliant Solution\n\
``php\n\
namespace Vendor\\Package;\n\
\n\
use FooClass;\n\
``
rule.php.S1808.param.use_blank_line== "use" declarations should be follow by a blank line\n\
== Noncompliant Code Example\n\
``php\n\
use FooClass;\n\
$foo = 1;\n\
``\n\
== Compliant Solution\n\
``php\n\
use FooClass;\n\
\n\
$foo = 1;\n\
``
rule.php.S1808.param.open_curly_brace_classes_functions== Open curly braces should be at the beginning of a new line for classes and functions\n\
== Noncompliant Code Example\n\
``php\n\
class MyClass {\n\
    \tfunction my_function(){\n\
    \t\t...\n\
    \t}\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
class MyClass\n\
{\n\
    \tfunction my_function()\n\
    \t{\n\
        \t\t...\n\
    \t}\n\
}\n\
``
rule.php.S1808.param.open_curly_brace_control_structures== Open curly braces should be at the end of line for control structures\n\
== Noncompliant Code Example\n\
``php\n\
if ($something)\n\
{\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.one_space_after== There should be exactly one space between closing parenthesis and opening curly braces\n\
== Noncompliant Code Example\n\
``php\n\
if ($something)      {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.one_space_before== There should be exactly one space between control structure keyword and opening parenthesis or curly brace\n\
== Noncompliant Code Example\n\
``php\n\
if($something) {\n\
    \t...\n\
}\n\
\n\
try{\n\
    \t...\n\
} catch (Exception $e) {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
\n\
try {\n\
    \t...\n\
} catch (Exception $e) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.closing_curly_brace== Close curly brace and the next "else", "catch" and "finally" keywords should be located on the same line\n\
== Noncompliant Code Example\n\
``php\n\
if ($something) {\n\
    \t...\n\
}\n\
else {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
if ($something) {\n\
    \t...\n\
} else {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.one_space_for== There should be one space after each ";" in "for" statement\n\
== Noncompliant Code Example\n\
``php\n\
for ($i = 0;$i < 10;   $i)\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
for ($i = 0; $i < 10; $i) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.space_comma== Commas should be followed by one space and not preceded by any\n\
== Noncompliant Code Example\n\
``php\n\
pressJuce($apply ,$orange);\n\
``\n\
== Compliant Solution\n\
``php\n\
pressJuce($apply, $orange);\n\
``
rule.php.S1808.param.no_space_method_name== There should not be any space after a method name\n\
== Noncompliant Code Example\n\
``php\n\
do_something ();\n\
``\n\
== Compliant Solution\n\
``php\n\
do_something();\n\
``
rule.php.S1808.param.foreach_space== In foreach statement there should be one space before and after "as" keyword and "=>" operator.\n\
== Noncompliant Code Example\n\
``php\n\
foreach ($fruits    as $fruit_key =>     $fruit) {\n\
    \t...\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
foreach ($fruits as $fruit_key => $fruit) {\n\
    \t...\n\
}\n\
``
rule.php.S1808.param.no_space== There should not be any space after the opening parenthesis and before the closing parenthesis\n\
== Noncompliant Code Example\n\
``php\n\
analyse( $fruit );\n\
``\n\
== Compliant Solution\n\
``php\n\
analyse($fruit);\n\
``
rule.php.S1808.param.closure_format== Closures declaration should be correctly spaced\n\
> Closures MUST be declared with a space after the function keyword, and a space before and after the use keyword.\n\
== Noncompliant Code Example\n\
``php\n\
$closureWithArgsAndVars = function($arg1, $arg2)use   ($var1, $var2) {\n\
    \t// body\n\
};\n\
``\n\
== Compliant Solution\n\
``php\n\
$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {\n\
    \t// body\n\
};\n\
``
rule.php.S1808.param.function_declaration_arguments_indentation== Arguments in method/function declarations should be correctly indented\n\
> Argument lists may be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list should be on the next line, and there should be only one argument per line.\n\
> When the argument list is split across multiple lines, the closing parenthesis and opening brace should be placed together on their own line with one space between them.\n\
==  Noncompliant Code Example\n\
``php\n\
namespace Vendor\\Package;\n\
\n\
class ClassName\n\
{\n\
    \tpublic function aVeryLongMethodName(ClassTypeHint $arg1,   // Noncompliant\n\
        \t\t&$arg2, array $arg3 = []) {\n\
\n\
        \t\t$noArgs_longVars = function () use ($longVar1,         // Noncompliant\n\
            \t\t\t$longerVar2,\n\
            \t\t\t$muchLongerVar3\n\
            \t\t\t) {\n\
                \t\t\t\t// body\n\
            \t\t\t};\n\
    \t}\n\
\t}\n\
``\n\
==  Compliant Solution\n\
``php\n\
namespace Vendor\\Package;\n\
\n\
class ClassName\n\
{\n\
    \tpublic function aVeryLongMethodName(\n\
        \t\tClassTypeHint $arg1,\n\
        \t\t&$arg2,\n\
        \t\tarray $arg3 = []\n\
    \t) {\n\
        \t\t$noArgs_longVars = function () use (\n\
            \t\t\t$longVar1,\n\
            \t\t\t$longerVar2,\n\
            \t\t\t$muchLongerVar3\n\
          \t\t) {\n\
                \t\t\t\t// body\n\
          \t\t};\n\
    \t}\n\
}\n\
``
rule.php.S1808.param.function_calls_arguments_indentation== Arguments in method/function calls should be correctly indented\n\
> Argument lists MAY be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there MUST be only one argument per line.\n\
== Noncompliant Code Example\n\
``php\n\
<?php\n\
$foo->bar($longArgument,    // Noncompliant\n\
    \t$longerArgument,\n\
    \t$muchLongerArgument);   // Noncompliant - closing parenthesis should be place on the next line\n\
``\n\
== Compliant Solution\n\
``php\n\
<?php\n\
$foo->bar(\n\
    \t$longArgument,\n\
    \t$longerArgument,\n\
    \t$muchLongerArgument\n\
);\n\
``
rule.php.S1808.param.interfaces_indentation== List of implemented interfaces should be correctly indented\n\
> Lists of implements may be split across multiple lines, where each subsequent line is indented once. When doing so, the first item in the list MUST be on the next line, and there should be only one interface per line.\n\
==  Noncompliant Code Example\n\
``php\n\
class ClassName extends ParentClass implements \\ArrayAccess, \\Countable,\n\
    \t\\Serializable\n\
{\n\
}\n\
``\n\
== Compliant Solution\n\
``php\n\
class ClassName extends ParentClass implements\n\
    \t\\ArrayAccess,\n\
    \t\\Countable,\n\
    \t\\Serializable\n\
{\n\
}\n\
``
rule.php.S1808.param.extends_implements_line== Class names, "extends" and "implements" keywords should be located on the same line\n\
The goal of this coding rule is to make it obvious at first look that a class extends some other classes and/or implements some interfaces. The names of extended classes or implemented interfaces can be located on next lines.\n\n\
== Noncompliant Code Example\n\
``php\n\
<?php\n\
class ClassName\n\
extends ParentClass {...}\n\
``\n\
== Compliant Solution\n\
``php\n\
<?php\n\
class ClassName extends ParentClass {...}\n\
``\n\
or\n\
``php\n\
<?php\n\
class ClassName extends\n\
ParentClass {...}\n\
``
rule.php.S1757.name="<?php" and "<?=" tags should be used

# Common rules
rule.common-php.InsufficientBranchCoverage.name=Insufficient branch coverage by unit tests
rule.common-php.InsufficientBranchCoverage.param.minimumBranchCoverageRatio=The minimum required branch coverage ratio.
rule.common-php.InsufficientCommentDensity.name=Source files should have a sufficient density of comment lines
rule.common-php.InsufficientCommentDensity.param.minimumCommentDensity=The minimum required comment density.
rule.common-php.DuplicatedBlocks.name=Source files should not have any duplicated blocks
rule.common-php.InsufficientLineCoverage.name=Insufficient line coverage by unit tests
rule.common-php.InsufficientLineCoverage.param.minimumLineCoverageRatio=The minimum required line coverage ratio.
rule.common-php.FailedUnitTests.name=Failed unit tests should be fixed
rule.common-php.SkippedUnitTests.name=Skipped unit tests should be either removed or fixed
